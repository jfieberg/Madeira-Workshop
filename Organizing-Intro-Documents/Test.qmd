---
title: "Madeira Workshop Test File"
author: "Add YOUR name here!"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    self-contained: true
---


## Load packages needed for the workshop

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
``` 

```{r}
packages <- c("amt",
              "sf",
              "tidyverse",
              "lubridate",
              "TwoStepCLogit",
              "glmmTMB",
              "tictoc",
              "broom",
              "here",
              "terra",
              "moveHMM",
              "boot",
              "survival", 
              "momentuHMM",
              "ctmm")

sapply(packages, require, character.only = TRUE)
```
 

## Short tests 

<!--- Insert whatever tests you want here --->

Don't worry too much about what the code is doing in these various sections (we will go over similar code during the workshop). A this point, just make sure everything runs without any errors!


### Test of SSF methods


Read in fisher data from the `R`esource-and-Step-Selection-Analyses/Data` subdirectory and select one individual's data for an SSF.
```{r}
fisherdat <- read_csv(
  here("Resource-and-Step-Selection-Analyses/Data", "fisher_data.csv")) |>
      dplyr::filter(id == 1465) 
```

Create  a track with an appropriate coordinate reference system.
```{r} 
fisher_trk <- make_track(fisherdat, x, y, t, crs = 4326) |>
      amt::transform_coords(5070)
```

Resample the track to 10 minutes with a tolerance of 2 minutes.
```{r}
fisher_trk <- fisher_trk |>
  track_resample(rate = minutes(10), tolerance = seconds(120)) 
```
 

Read in the landuse raster and reclassify to two categories (wet forests and other).

```{r}
landuse <- rast(
  here("Resource-and-Step-Selection-Analyses/Data",  "landuse_study_area.tif"))
wet_forests <- landuse %in% c(90, 95)
names(wet_forests) <- "forest"
```

Prepare a "steps" representation of the data for fitting SSFs.
```{r}
#| warning: false
#| message: false
fisher_ssf <- fisher_trk |> 
                 steps_by_burst() |> # steps version of the data set
                 random_steps() |>  # random steps for fitting model
                 extract_covariates(wet_forests) |> # extract coordinates
                 mutate(cos_ta = cos(ta_), log_sl = log(sl_))
```

Fit SSF and look at summary output:
```{r}
fisherSSF <-  fit_clogit(case_ ~ forest + cos_ta + sl_ + log_sl + strata(step_id_),
                         data = fisher_ssf)
summary(fisherSSF)
```

### Test of HMM methods

Read in elk data of Morales et al. (2004) from Ecological Archives.
```{r}
trackData <- read.table("https://esapubs.org/archive/ecol/E085/072/elk_data.txt",sep="\t",header=TRUE)
# remove blank rows
trackData <- trackData[1:735,]
```

Convert locations from meters to km.
```{r}
trackData$Easting <- trackData$Easting/1000
trackData$Northing <- trackData$Northing/1000
```

Prepare data for analysis and fit using moveHMM.
```{r}
#| warning: false
colnames(trackData)[1] <- "ID"
elkData <- moveHMM::prepData(trackData,type="UTM",coordNames=c("Easting","Northing"))

# specify initial values for optimization
shape <- c(1,2) # step shape (two parameters: one for each state)
scale <- c(0.5,5) # step scale
zeromass0 <- c(0.01,0.001) # step zero-mass (needed to account for zero step lengths)
stepPar0 <- c(shape,scale,zeromass0)
angleMean0 <- c(pi,0) # angle mean
rho <- c(0.2,0.75) # angle concentration
anglePar0 <- c(angleMean0,rho)

# fit "double switch with covariates" model
doubleSwitch1 <- moveHMM::fitHMM(data=elkData,nbStates=2,stepPar0=stepPar0,anglePar0=anglePar0,stepDist="gamma",angleDist="vm",stationary=TRUE)
doubleSwitch1
```

Prepare data for analysis and fit using momentuHMM.
```{r}
#| message: false
elkData <- momentuHMM::prepData(trackData,coordNames=c("Easting","Northing"))

# fit "double switch with covariates" model
doubleSwitch2 <- momentuHMM::fitHMM(data=elkData,nbStates=2,Par0=list(step=stepPar0,angle=anglePar0),dist=list(step="gamma",angle="vm"),estAngleMean=list(angle=TRUE),stationary=TRUE)
doubleSwitch2
```

Verify crawl and interpolation work
```{r}
utils::example("crawlWrap","momentuHMM",run.dontrun = TRUE)
head(crwOut2$crwPredict[,c("ID","time","mu.x","mu.y","x","y","cov1","cov2")],7)
```


### Test for ctmm methods

Read-in African buffalo (Syncerus caffer) data from Kruger National Park:

```{r}
data(buffalo)
data_buffalo <- buffalo$Cilla[1:300, ] # first 300 rows to speed up run time
```

Calculate variogram:
```{r}

svf <- variogram(data_buffalo)
plot(svf, level = c(0.5, 0.95)) #  with 50% and 95% CIs
```

Select best-fit movement model:

```{r}
guess_buffalo <- ctmm::ctmm.guess(data_buffalo, interactive = FALSE)
fit_buffalo <- ctmm::ctmm.fit(data_buffalo, guess_buffalo)
summary(fit_buffalo)
```

Run Autocorrelated Kernel density Estimation (AKDE):

```{r}
AKDE <- ctmm::akde(data_buffalo, fit_buffalo)
summary(AKDE)
plot(data_buffalo, UD = AKDE)
```

## Report versions of packages

```{r}
sessionInfo()
```

